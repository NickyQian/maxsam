<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
           http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.0.xsd
           http://www.springframework.org/schema/mvc
           http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">

	<import resource="spring-database.xml" />
	
	<!-- 启动扫描所有的controller -->
	<context:component-scan base-package="com.maxsam" />
	<!--support for general annotations such as @Required, @Autowired, @PostConstruct, and so on.-->
	<context:annotation-config />
	<!-- 主要作用于@Controller，激活该模式下面是一种简写形式，完全可以手动配置替代这种简写形式； 它会自动注册DefaultAnnotationHandlerMapping与AnnotationMethodHandlerAdapter 
		两个bean, 是spring MVC为@Controllers分发请求所必须的 -->
	<mvc:annotation-driven />
	
	<mvc:resources mapping="/views/**" location="/views/" />
	<mvc:resources mapping="/css/**" location="/css/" />
	<mvc:resources mapping="/js/**" location="/js/" />
	<mvc:resources mapping="/img/**" location="/img/" />
	<mvc:resources mapping="/jquery/**" location="/jquery/" />
	<mvc:resources mapping="/photos/**" location="/photos/" />
	
	<!-- freemarker configuration -->
	<!-- Set location of freeMarker configure file -->
	<bean id="freemarkerConfiguration"
		class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="location" value="classpath:freemarker.properties" />
	</bean>
	<bean id="freemarkerConfigurer"
		class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
		<property name="templateLoaderPath" value="/views/" />
		<property name="defaultEncoding" value="UTF-8" />
		<property name="freemarkerSettings" ref="freemarkerConfiguration" />
	</bean>

	<!-- FreeMarker view resolver. -->
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.freemarker.FreeMarkerView" />
		<property name="suffix" value=".ftl" />
		<property name="cache">
            <value>true</value>
        </property>
		<property name="contentType" value="text/html;charset=utf-8" />
		<property name="requestContextAttribute" value="request" />
		<property name="exposeRequestAttributes" value="true" />
		<property name="exposeSessionAttributes" value="true" />
		<property name="exposeSpringMacroHelpers" value="true" />
	</bean>
	
	<!-- Shiro configuration -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		<property name="loginUrl" value="/login" />
		<property name="successUrl" value="/home.jsp" />
		<property name="unauthorizedUrl" value="/unauthorized.jsp" />
		<!-- The 'filters' property is not necessary since any declared javax.servlet.Filter 
			bean -->
		<!-- defined will be automatically acquired and available via its beanName 
			in chain -->
		<!-- definitions, but you can perform instance overrides or name aliases 
			here if you like: -->
		<!-- <property name="filters"> <util:map> <entry key="anAlias" value-ref="someFilter"/></util:map> 
			</property> -->
		<property name="filterChainDefinitions">
			<value>
				# some example chain definitions:
				/admin/** = authc
				#/** = authc
				# more URL-to-FilterChain definitions here
			</value>
		</property>
	</bean>

	<!-- Define any javax.servlet.Filter beans you want anywhere in this application 
		context. -->
	<!-- They will automatically be acquired by the 'shiroFilter' bean above 
		and made available -->
	<!-- to the 'filterChainDefinitions' property. Or you can manually/explicitly 
		add them -->
	<!-- to the shiroFilter's 'filters' Map if desired. See its JavaDoc for 
		more details. -->
	<!-- <bean id="someFilter" class="..." /> <bean id="anotherFilter" class="..."></bean> -->

	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!-- Single realm app. If you have multiple realms, use the 'realms' property 
			instead. -->
		<property name="realm" ref="maxSamRealm" />
		<!-- By default the servlet container sessions will be used. Uncomment 
			this line to use shiro's native sessions: -->
		<!-- <property name="sessionMode" value="native"/> -->
	</bean>
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

	<!-- Define the Shiro Realm implementation you want to use to connect to 
		your back-end -->
	<!-- security datasource: -->
	<!-- <bean id="maxSamRealm" class="com.maxsam.security.MaxSamRealm"> </bean> -->
</beans>